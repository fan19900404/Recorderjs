/*License (MIT)

Copyright Â© 2013 Matt Diamond

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and 
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of 
the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
*/

(function(window) {

    var WORKER_PATH = 'js/recorderWorker.js'; //自己设置recorderWorker.js的路径

    /**
     * 录音机
     * source：音源
     * cfg:配置
     */
    var Recorder = function(source, cfg) {
        var config = cfg || {}; //配置
        var bufferLen = config.bufferLen || 4096; //块长度
        this.context = source.context; //音频上下文
        if (!this.context.createScriptProcessor) { //创建进程（createScriptProcessor是标准）
            this.node = this.context.createJavaScriptNode(bufferLen, 2, 2); //这是非标准的
        } else {
            this.node = this.context.createScriptProcessor(bufferLen, 2, 2); //这是标准的
        }

        var worker = new Worker(config.workerPath || WORKER_PATH); //启用worker,后面是recordWorker.js的路径
        worker.postMessage({ //worker传参
            command: 'init',
            config: {
                sampleRate: this.context.sampleRate
            }
        });
        var recording = false,
            currCallback;

        //音频进程
        this.node.onaudioprocess = function(e) {
            if (!recording) return;
            worker.postMessage({
                command: 'record',
                buffer: [
                    e.inputBuffer.getChannelData(0),
                    e.inputBuffer.getChannelData(1)
                ]
            });
        }

        //配置
        this.configure = function(cfg) {
            for (var prop in cfg) {
                if (cfg.hasOwnProperty(prop)) {
                    config[prop] = cfg[prop];
                }
            }
        }

        //录制
        this.record = function() {
            recording = true;
        }

        //停止
        this.stop = function() {
            recording = false;
        }

        //清除
        this.clear = function() {
            worker.postMessage({ command: 'clear' });
        }

        //获取数据
        this.getBuffers = function(cb) {
            currCallback = cb || config.callback;
            worker.postMessage({ command: 'getBuffers' })
        }

        //暴露WAV格式语音
        this.exportWAV = function(cb, type) {
            currCallback = cb || config.callback;
            type = type || config.type || 'audio/wav';
            if (!currCallback) throw new Error('Callback not set');
            worker.postMessage({
                command: 'exportWAV',
                type: type
            });
        }

        //单声道wav
        this.exportMonoWAV = function(cb, type) {
            currCallback = cb || config.callback;
            type = type || config.type || 'audio/wav';
            if (!currCallback) throw new Error('Callback not set');
            worker.postMessage({
                command: 'exportMonoWAV',
                type: type
            });
        }

        //收到信息
        worker.onmessage = function(e) {
            var blob = e.data;
            currCallback(blob);
        }

        //音源合并
        source.connect(this.node);
        this.node.connect(this.context.destination); // if the script node is not connected to an output the "onaudioprocess" event is not triggered in chrome.
    };

    //设置下载
    Recorder.setupDownload = function(blob, filename) {
        var url = (window.URL || window.webkitURL).createObjectURL(blob);
        var link = document.getElementById("save");
        link.href = url;
        link.download = filename || 'output.wav';
    }

    window.Recorder = Recorder;

})(window);